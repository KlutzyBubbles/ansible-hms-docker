---
### BEGIN Process required for migrating old Authentik-specific env to current
- name: Check for existing .env file
  ansible.builtin.stat:
    path: "{{ hms_docker_data_path }}/.env"
  register: env_file_path

- name: Check for existing authentik key file
  ansible.builtin.stat:
    path: "{{ authentik_key_path }}"
  register: authentik_key_precheck

- name: Check for existing authentik postgres password file
  ansible.builtin.stat:
    path: "{{ authentik_pgpass_path }}"
  register: authentik_pg_pass_precheck

- name: Slurp existing authentik secret key data
  ansible.builtin.slurp:
    path: "{{ env_file_path.stat.path }}"
  register: slurped_old_authentik_data
  no_log: true
  when: env_file_path.stat.exists and not authentik_pg_pass_precheck.stat.exists and not authentik_key_precheck.stat.exists

- name: Pull authentik items from previous install
  ansible.builtin.set_fact:
    authentik_old_key: "{{ slurped_old_authentik_data['content'] | b64decode | regex_search('(?<=AUTHENTIK_SECRET_KEY=).*') }}"
    authentik_old_pg_user: "{{ slurped_old_authentik_data['content'] | b64decode | regex_search('(?<=PG_USER=).*') }}"
    authentik_old_pg_pass: "{{ slurped_old_authentik_data['content'] | b64decode | regex_search('(?<=PG_PASS=).*') }}"
    authentik_old_pg_db: "{{ slurped_old_authentik_data['content'] | b64decode | regex_search('(?<=PG_DB=).*') }}"
    cacheable: false
  when: slurped_old_authentik_data['content'] is defined
  no_log: true
### END Upgrade process for Authentik env file

- name: Ensure authentik secret key file
  ansible.builtin.template:
    src: authentik_secret.j2
    dest: "{{ authentik_key_path }}"
    mode: 0600
    owner: root
    group: root
    backup: yes
    force: no
  register: authentik_key_template_output
  no_log: true
  vars:
    - key: "{{ authentik_old_key if authentik_old_key is defined and authentik_old_key != '' else lookup('password', '/dev/null length=50 chars=ascii_letters') }}"

- name: Ensure authentik postgres password file
  ansible.builtin.template:
    src: authentik_secret.j2
    dest: "{{ authentik_pgpass_path }}"
    mode: 0600
    owner: root
    group: root
    backup: yes
    force: no
  register: authentik_pgpass_template_output
  no_log: true
  vars:
    - key: "{{ authentik_old_pg_pass if authentik_old_pg_pass is defined and authentik_old_pg_pass != '' else lookup('password', '/dev/null length=50 chars=ascii_letters') }}"

- name: Slurp authentik secret key data
  ansible.builtin.slurp:
    src: "{{ authentik_key_template_output.dest }}"
  register: slurped_key_data
  check_mode: false
  when: authentik_key_template_output.dest is defined
  no_log: true

- name: Slurp authentik postgres password data
  ansible.builtin.slurp:
    src: "{{ authentik_pgpass_template_output.dest }}"
  register: slurped_pg_pass_data
  check_mode: false
  when: authentik_pgpass_template_output.dest is defined
  no_log: true

- name: Ensure Outposts directory
  ansible.builtin.file:
    path: "{{ hms_docker_apps_path }}/authentik/outposts"
    state: directory
    mode: 0755
    owner: root
    group: root

- name: Ensure authentik Outpost configs
  ansible.builtin.template:
    src: authentik_outpost.j2
    dest: "{{ hms_docker_apps_path }}/authentik/outposts/authentik-{{ item.key }}.outpost.yml"
    mode: 0644
  with_dict: "{{ hms_docker_container_map }}"
  when: 
    - item.value.enabled 
    - item.value.authentik is defined and item.value.authentik
    - item.value.authentik_provider_type is defined and item.value.authentik_provider_type == 'proxy'

- name: Ensure authentik Outpost configs for static traefik configs
  ansible.builtin.template:
    src: authentik_outpost_ext_host.j2
    dest: "{{ hms_docker_apps_path }}/authentik/outposts/authentik-{{ item.friendly_name | map('regex_replace', regex, replace) | list | join }}.outpost.yml"
    mode: 0644
  with_items: "{{ traefik_ext_hosts_list }}"
  when: 
    - item.enabled 
    - item.authentik is defined and item.authentik
    - item.authentik_provider_type is defined and item.authentik_provider_type == 'proxy'

- name: Ensure authentik Outpost configs for 4K containers
  ansible.builtin.template:
    src: authentik_outpost_4k.j2
    dest: "{{ hms_docker_apps_path }}/authentik/outposts/authentik-{{ item.key }}-{{ separate_4k_instances_suffix }}.outpost.yml"
    mode: 0644
  with_dict: "{{ hms_docker_container_map }}"
  when: 
    - item.value.enabled 
    - item.value.authentik is defined and item.value.authentik
    - item.key == 'sonarr' or item.key == 'radarr'
    - item.value.authentik_provider_type is defined and item.value.authentik_provider_type == 'proxy'
    - separate_4k_instances_enable is defined and separate_4k_instances_enable

#### if authentik_provision_config is defined and authentik_provision_config:
#### do the logic to configure providers, applications, etc
